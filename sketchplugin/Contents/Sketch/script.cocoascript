var pluginName = 'Proof Copy';

var I18N = {};
var lang = NSUserDefaults.standardUserDefaults().objectForKey("AppleLanguages").objectAtIndex(0);

I18N["zh-Hans"] = {
    "You need an artboard."                             : "请在画板中使用该功能.",
    "Get properties"                                    : "获取属性",
    "OK"                                                : "确定",
    "Cancel"                                            : "取消"
};

I18N["fr"] = {
    "You need an artboard."                             : "Un tableau (artboard) est requis",
    "Get properties"                                    : "Afficher les propriétés",
    "OK"                                                : "Valider",
    "Cancel"                                            : "Annuler"
};
 
function _(str){
  return (I18N[lang] && I18N[lang][str])? I18N[lang][str]: str;
}

var com = com || {};

var onRun = function(context) {
  // Context is a dictionary containing a reference to the document, 
  // the current selection, the plugin, curren URL and more.
  
  // Include additionl frameworks.
  // framework('WebKit');
  // framework('AppKit');
  
  var doc = context.document;           // the current document (MSDocument)
  var plugin = context.plugin;          // the plugin (MSPluginBundle)
  var page = doc.currentPage();         // the current page (MSPage)
  
  // The current command (MSPluginCommand)
  var command = context.command;
  var selection = context.selection;
  
   var layers;
  
  if (selection.count()) {
    layers = selection;
  } else {
    layers = [page children];
  }
  
  var textLayers = getTextLayers(layers, command);
  var html = renderHtml(textLayers, command);   
  
  /*
  var antidoteTask = [[NSTask alloc] init];
  var osascript = "osascript -e 'tell app \"Antidote 9\" to activate'";

  [antidoteTask setLaunchPath:"/bin/bash"];
  [antidoteTask setArguments:["-c", osascript]];
  [antidoteTask launch];
  [antidoteTask waitUntilExit];
  */
  
  var result = createPluginPanel(doc, html);
  
  if (result.responseCode == 1001) {
    return;
  }
  
  if (result.data) {
    var xmlDoc = NSXMLDocument.alloc().initWithXMLString_options_error(result.data, NSXMLDocumentTidyHTML, null);
    var textItems = [];
    
    //var dict = NSMutableDictionary.dictionary();
    var aNode = xmlDoc.rootElement();
    while (aNode = aNode.nextNode()) {
      if (aNode.kind() == NSXMLElementKind && aNode.name() == "div") {
        var item = {};
        //item.string = aNode.stringValue();  
        item.string = parseDivToString(aNode.children());
        item.uuid = aNode.attributeForName('data-uuid').stringValue();
        item.name = aNode.attributeForName('data-name').stringValue();
        textItems[item.uuid] = item;
      }
    }  
    updateDocument(textLayers, textItems, command);
    [doc showMessage:@"⭕️ Poof Copy Update Complete…"];
  } else {
    [doc showMessage:@"⭕️ Poof Copy Nothing to Update…"];
  }
};

var parseDivToString = function(children){
  //var text = '';
  var xmlText = '';
  log('tytu');
  for (var i = 0; i < children.count(); i++) {
    var child = [children objectAtIndex:i];
    if (child.kind() == NSXMLElementKind && child.name() == "p") {
      xmlText += child.XMLString();
    }
  }
  return xmlText.replace(/(\r\n|\r|\n)/g, '').replace(/(<p>|<br>)/g, '').replace(/<\/br>/g, '\u2028').replace(/<\/p>/g, '\n');
}

var toType = function(obj) {
  return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase()
}

var updateDocument = function(layers, items, command){
  for (var i = 0; i < layers.length; i++) {
    var layer = layers[i];
    var uuid = [command valueForKey:"apUUID" onLayer:layer];
    //layer.setStringValue(items[uuid].string.trim());
    if(layer.stringValue() == items[uuid].string.trim() || layer.stringValue() == items[uuid].string) {
      continue;
    }
    // TODO add an option to force this action.
    var layerName = layer.name()+'';
    var layerNameLength = layerName.length;
    
    if (layer.name().substring(0, layerNameLength) == layer.stringValue().substring(0, layerNameLength)) {
      layer.setName(items[uuid].string.trim());
    }
    if((layer.stringValue()+'').length == items[uuid].string.trim().length) {
      layer.replaceTextPreservingAttributeRanges(items[uuid].string.trim());
    } else {
      // TODO add warning modal
      // log(items[uuid].string.trim());
      layer.setStringValue(items[uuid].string.trim());
    }
    layer.adjustFrameToFit();
  }
};

var canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, '\n');
};

var paragraph = function(text) {
  var result = '';
  for (var i = 0; i < text.length; i++) {
    result += '<p>' + text[i] + '</p>' + "\n";
  }
  return result;
}

var renderHtml = function(layers, command) {
  var html = '';
  for (var i = 0; i < layers.length; i++) {
    // todo exclude locked layers
    var layer = layers[i];
    var uuid = [command valueForKey:"apUUID" onLayer:layer];
    var stringValue = layer.stringValue();
    //log(stringValue.replace(/\u2028/g, "<br>"));
    var text = stringValue.replace(/\u2028/g, " <br>"); // 0x2029 paragraph; 0x2028 NSLineSeparatorCharacter
    var block = paragraph(canonicalizeNewlines(text).split('\n'));
    html += '<div data-uuid="' + uuid + '" data-name="' + layer.name() + '">' + block + '</div>\n\n';
  }
  return html;
};

var getTextLayers = function(layers, command) {
  var textLayers = []; 
  for (var i = 0; i < layers.count(); i++) {
      var layer = [layers objectAtIndex:i];
      if (layer.class() === MSTextLayer) {
        [command setValue:uuid() forKey:"apUUID" onLayer:layer];
        textLayers.push(layer);
      }
  }
  return textLayers;
};

var uuid = function(){
  var d = new Date().getTime();
  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r = (d + Math.random() * 16) % 16 | 0;
      var v = c == 'x' ? r : (r&0x3 | 0x8);
      return v.toString(16);
  });
  return uuid;
};

function alert(msg, title) {
    title = title || pluginName;
    var app = [NSApplication sharedApplication];
    [app displayDialog:msg withTitle:title];
}

function copyStringToClipboard(string) {
    var clipboard = NSPasteboard.generalPasteboard();
    clipboard.declareTypes_owner([NSPasteboardTypeString], null);
    clipboard.setString_forType(string , NSPasteboardTypeString);
    alert('Text has been copied to your clipboard, paste it in your favorite editor.', null);
    return true;
}

function bundlePath(){		
		var path = coscript.env().scriptURL.path();
		var pathNS = NSString.alloc().initWithString(path + "");
		
		while (pathNS.lastPathComponent().pathExtension() != "sketchplugin") {
			pathNS = pathNS.stringByDeletingLastPathComponent();
		}
		return pathNS + "";
}

/*
function addCheckbox(item, checked) {
  checked = (checked == false)? NSOffState: NSOnState;
  var checkbox = [[NSButton alloc] initWithFrame: NSMakeRect(0, 0, 300, 22)];
  [checkbox setButtonType: NSSwitchButton]
  [checkbox setBezelStyle: 0]
  [checkbox setTitle: item.name]
  [checkbox setTag: item.value]
  [checkbox setState: checked]
  return checkbox;
}
*/

function createPluginPanel(doc, html){
  var clipboard = NSPasteboard.generalPasteboard();
  clipboard.declareTypes_owner([NSPasteboardTypeString], null);
  clipboard.setString_forType(html , NSPasteboardTypeString);
  
  var rect = NSMakeRect(0,0,678,400);

  var accessoryView = NSView.alloc().initWithFrame(NSMakeRect(0,20,678,400));  
  
  //  html view
  var scrollView = NSScrollView.alloc().initWithFrame(rect);
  scrollView.setHasVerticalScroller(true);
  var htmlTextView = NSTextView.alloc().initWithFrame(rect);
  
  htmlTextView.setString(html);
  htmlTextView.setEditable(true);
  htmlTextView.setSelectable(true);  
  scrollView.setDocumentView(htmlTextView);    
  accessoryView.addSubview(scrollView);
  
  //  force rename checkbox 
  
  var alert = NSAlert.alloc().init();
    
  var icon = NSImage.alloc().initByReferencingFile(bundlePath() + '/Contents/Resources/proof-copy.icns');
  
  alert.setIcon(icon);
  alert.setMessageText(pluginName);
  alert.informativeText = 'Text has been copied to your clipboard, paste it in your favorite editor.\nPaste the edited html text below and press OK button to apply your corrections.\nWarning: Some modification can remove inline style.';
  
  alert.addButtonWithTitle(_('Ok'));
  alert.addButtonWithTitle(_('Cancel'));
  alert.setAccessoryView(accessoryView);
    
  var responseCode = alert.runModal();
  var string = htmlTextView.string();
    
  return {
    responseCode: responseCode,
    data: string
  };
}
